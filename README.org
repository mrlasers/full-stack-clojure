* Full-Stack Clojure

A full-stack Clojure demonstration, including backend, frontend, and an
API to connect the two.

** TODO Features [0/3]
- [-] Frontend
  - [X] ClojureScript setup and served from backend
  - [ ] Basic Reagent home page
  - [ ] Header
    - [ ] Main navigation menu
      - [ ] Is there a way to tie this directly into routes? Like mark a
            frontend route with ~:nav~ key or something?
      - [ ] Active links that navigate to other pages
    - [ ] Profile box
      - [ ] Display login form if user is not logged in
      - [ ] Display top-line user details if logged in
  - [ ] Main pages
    - [ ] Home page that looks kind of nice
    - [ ] Page that displays some kind of table with data from the backend
  - [ ] Styling
    - [ ] What tech?
      - [ ] Vanilla CSS
      - [ ] SCSS (can get this to live compile in emacs)
      - [ ] SASS (sass watcher in other terminal?)
      - [ ] TailWind (yuck, but I'll put it here)
      - [ ] Garden CSS
      - [ ] Other CSS-in-CLJ options?
  - [ ] Muuntaja + Transit
- [-] Backend
  - [X] Serve HTML+ClojureScript
  - [ ] Authentication
    - [ ] Log in
    - [ ] Log out
    - [ ] ~buddy-auth/wrap-authentication~
  - [ ] Authorization
    - [ ] ~buddy-auth/wrap-authorization~
          Still unsure if I like the authorization wrapper. Having a second
          set of route data--in a different syntax, no less--to deal with
          seems like a pain.
  - [ ] Database (XTDB, natch)
    - [ ] Store user profiles
  - [ ] Server-side rendering
    - [ ] Supposedly this can be done with hiccup2
- [ ] Deployment
